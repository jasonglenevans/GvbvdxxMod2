{"version":3,"file":"js/addon-entry-swap-local-global.js","sources":["webpack://GUI/./src/addons/addons/swap-local-global/style.css","webpack://GUI/./src/addons/addons/swap-local-global/_runtime_entry.js","webpack://GUI/./src/addons/addons/swap-local-global/userscript.js"],"sourcesContent":["exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".sa-swap-local-global-hint {\\r\\n  padding-bottom: 1rem;\\r\\n}\\r\\n.sa-swap-local-global-stage {\\r\\n  /* resolves scratch class style conflict */\\r\\n  display: block;\\r\\n}\\r\\n\", \"\"]);\n\n// exports\n","/* generated by pull.js */\nimport _js from \"./userscript.js\";\nimport _css from \"!css-loader!./style.css\";\nexport const resources = {\n  \"userscript.js\": _js,\n  \"style.css\": _css,\n};\n","export default async function ({ addon, msg, console }) {\r\n  const ScratchBlocks = await addon.tab.traps.getBlockly();\r\n  const vm = addon.tab.traps.vm;\r\n\r\n  const getTargetName = (target) => {\r\n    if (target.isStage) {\r\n      // Stage always has an internal name of \"Stage\", but we want a translatable name\r\n      return ScratchBlocks.ScratchMsgs.translate(\"SENSING_OF_STAGE\", \"Stage\");\r\n    }\r\n    return target.getName();\r\n  };\r\n\r\n  const getTargetsThatUseVariable = (id) =>\r\n    vm.runtime.targets\r\n      .filter((target) => target.isOriginal)\r\n      .filter((target) =>\r\n        Object.values(target.blocks._blocks).find(\r\n          (block) =>\r\n            (block.fields.LIST && block.fields.LIST.id === id) ||\r\n            (block.fields.VARIABLE && block.fields.VARIABLE.id === id)\r\n        )\r\n      );\r\n\r\n  // https://github.com/LLK/scratch-vm/blob/7c6f1e44fb0a9b0d0279225cd4c62fbe59b6af54/src/engine/blocks.js#L388-L394\r\n  const getTargetsWithLocalVariableNamed = (name, type) =>\r\n    vm.runtime.targets.filter((target) => target.isOriginal && target.lookupVariableByNameAndType(name, type, true));\r\n\r\n  const getVmVariable = (id) => vm.editingTarget.lookupVariableById(id);\r\n  const isStageSelected = () => vm.editingTarget.isStage;\r\n\r\n  const deleteVariableWithoutDeletingBlocks = (workspace, variable) => {\r\n    // variable can be an ID or an actual Blockly variable object\r\n    if (typeof variable === \"string\") {\r\n      variable = workspace.getVariableById(variable);\r\n    }\r\n    workspace.variableMap_.deleteVariable(variable);\r\n  };\r\n\r\n  const syncBlockVariableNameWithActualVariableName = (workspace, id) => {\r\n    const variable = workspace.getVariableById(id);\r\n    for (const block of workspace.getAllBlocks()) {\r\n      block.updateVarName(variable);\r\n    }\r\n  };\r\n\r\n  let _undoRedoPreserveStateCallback = null;\r\n  const finishUndoRedoState = () => {\r\n    if (_undoRedoPreserveStateCallback) {\r\n      _undoRedoPreserveStateCallback();\r\n      _undoRedoPreserveStateCallback = null;\r\n    }\r\n  };\r\n\r\n  // https://github.com/LLK/scratch-blocks/blob/0d6012df1e18e66d82c1247f1f6d772a719982a7/core/variable_events.js#L194\r\n  const customUndoVarDelete = function (forward) {\r\n    const workspace = this.getEventWorkspace_();\r\n    if (forward) {\r\n      _undoRedoPreserveStateCallback = beginPreservingState(workspace, this.varId);\r\n      deleteVariableWithoutDeletingBlocks(workspace, this.varId);\r\n    } else {\r\n      workspace.createVariable(this.varName, this.varType, this.varId, this.isLocal, this.isCloud);\r\n      finishUndoRedoState();\r\n    }\r\n  };\r\n\r\n  // https://github.com/LLK/scratch-blocks/blob/0d6012df1e18e66d82c1247f1f6d772a719982a7/core/variable_events.js#L131\r\n  const customUndoVarCreate = function (forward) {\r\n    const workspace = this.getEventWorkspace_();\r\n    if (forward) {\r\n      workspace.createVariable(this.varName, this.varType, this.varId, this.isLocal, this.isCloud);\r\n      finishUndoRedoState();\r\n    } else {\r\n      _undoRedoPreserveStateCallback = beginPreservingState(workspace, this.varId);\r\n      deleteVariableWithoutDeletingBlocks(workspace, this.varId);\r\n    }\r\n  };\r\n\r\n  const flushBlocklyEventQueue = () => ScratchBlocks.Events.fireNow_();\r\n\r\n  const beginPreservingState = (workspace, id) => {\r\n    // oldMonitorState is an instance of https://github.com/LLK/scratch-vm/blob/develop/src/engine/monitor-record.js or undefined\r\n    const oldMonitorState = vm.runtime._monitorState.get(id);\r\n    const oldVmVariable = getVmVariable(id);\r\n    return () => {\r\n      flushBlocklyEventQueue();\r\n\r\n      const newVmVariable = getVmVariable(id);\r\n      if (newVmVariable) {\r\n        newVmVariable.value = oldVmVariable.value;\r\n      }\r\n\r\n      // Update the variable monitor (state is maintained separately)\r\n      if (oldMonitorState) {\r\n        if (oldMonitorState.visible) {\r\n          vm.runtime.monitorBlocks.changeBlock({\r\n            id,\r\n            element: \"checkbox\",\r\n            value: true,\r\n          });\r\n        }\r\n        const isLocal = !vm.runtime.getTargetForStage().variables[id];\r\n        let newMonitorState = oldMonitorState;\r\n        if (isLocal) {\r\n          const target = vm.editingTarget;\r\n          newMonitorState = newMonitorState.set(\"targetId\", target.id);\r\n          newMonitorState = newMonitorState.set(\"spriteName\", target.getName());\r\n        } else {\r\n          newMonitorState = newMonitorState.set(\"targetId\", null);\r\n          newMonitorState = newMonitorState.set(\"spriteName\", null);\r\n        }\r\n        if (newVmVariable.name !== oldVmVariable.name) {\r\n          const monitorBlocks = vm.runtime.monitorBlocks;\r\n          const block = monitorBlocks.getBlock(id);\r\n          if (block) {\r\n            newMonitorState = newMonitorState.set(\"params\", monitorBlocks._getBlockParams(block));\r\n          }\r\n        }\r\n        vm.runtime.requestAddMonitor(newMonitorState);\r\n      }\r\n\r\n      if (newVmVariable.name !== oldVmVariable.name) {\r\n        syncBlockVariableNameWithActualVariableName(workspace, id);\r\n      }\r\n    };\r\n  };\r\n\r\n  const convertVariable = (oldBlocklyVariable, newLocal, newCloud) => {\r\n    const CLOUD_PREFIX = \"☁ \";\r\n\r\n    const name = oldBlocklyVariable.name;\r\n    const id = oldBlocklyVariable.getId();\r\n    const type = oldBlocklyVariable.type;\r\n    const isLocal = oldBlocklyVariable.isLocal;\r\n    const isCloud = oldBlocklyVariable.isCloud;\r\n    if (isLocal === newLocal && isCloud === newCloud) {\r\n      return;\r\n    }\r\n\r\n    // Cloud variables must always be global\r\n    if (newCloud && newLocal) {\r\n      alert(msg(\"cant-convert-cloud\"));\r\n      return;\r\n    }\r\n\r\n    const editingTarget = vm.editingTarget;\r\n    if (isLocal !== newLocal) {\r\n      if (newLocal) {\r\n        // Stage cannot have local variables\r\n        if (isStageSelected()) {\r\n          alert(msg(\"cant-convert-stage\"));\r\n          return;\r\n        }\r\n        // Variables used by unfocused sprites cannot be made local\r\n        // That includes cases where the variable is used by multiple sprites and where it's only used by an unfocused sprite\r\n        const targets = getTargetsThatUseVariable(id);\r\n        if (!targets.every((i) => i === editingTarget)) {\r\n          if (targets.length > 1) {\r\n            alert(\r\n              msg(\"cant-convert-to-local\", {\r\n                sprites: targets.map(getTargetName).join(\", \"),\r\n              })\r\n            );\r\n          } else {\r\n            alert(\r\n              msg(\"cant-convert-used-elsewhere\", {\r\n                sprite: getTargetName(targets[0]),\r\n              })\r\n            );\r\n          }\r\n          return;\r\n        }\r\n      } else {\r\n        // Global variables must not conflict with any local variables\r\n        const targets = getTargetsWithLocalVariableNamed(name, type).filter((target) => target !== editingTarget);\r\n        if (targets.length > 0) {\r\n          alert(\r\n            msg(\"cant-convert-conflict\", {\r\n              sprites: targets.map(getTargetName).join(\", \"),\r\n            })\r\n          );\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    let newName = name;\r\n    if (isCloud !== newCloud) {\r\n      if (newCloud) {\r\n        newName = CLOUD_PREFIX + name;\r\n      } else if (name.startsWith(CLOUD_PREFIX)) {\r\n        newName = name.replace(CLOUD_PREFIX, \"\");\r\n      }\r\n    }\r\n\r\n    const workspace = oldBlocklyVariable.workspace;\r\n    const finishPreservingState = beginPreservingState(workspace, id);\r\n\r\n    ScratchBlocks.Events.setGroup(true);\r\n    try {\r\n      deleteVariableWithoutDeletingBlocks(workspace, oldBlocklyVariable);\r\n      workspace.createVariable(newName, type, id, newLocal, newCloud);\r\n    } finally {\r\n      ScratchBlocks.Events.setGroup(false);\r\n    }\r\n\r\n    // 2 items will be added to the queue: a variable create and delete\r\n    // We override their undo handlers to make undo/redo work properly\r\n    flushBlocklyEventQueue();\r\n    const stack = workspace.undoStack_;\r\n    const createEvent = stack[stack.length - 1];\r\n    const deleteEvent = stack[stack.length - 2];\r\n    if (\r\n      createEvent instanceof ScratchBlocks.Events.VarCreate &&\r\n      deleteEvent instanceof ScratchBlocks.Events.VarDelete\r\n    ) {\r\n      createEvent.run = customUndoVarCreate;\r\n      deleteEvent.run = customUndoVarDelete;\r\n    }\r\n\r\n    finishPreservingState();\r\n  };\r\n\r\n  const canUserUseCloudVariables = () => {\r\n    const blocksWrapper = document.querySelector('[class^=\"gui_blocks-wrapper_\"]');\r\n    let internalNode = blocksWrapper[addon.tab.traps.getInternalKey(blocksWrapper)];\r\n    while (true) {\r\n      if (!internalNode) {\r\n        return false;\r\n      }\r\n      const canUseCloud = internalNode.stateNode?.props?.canUseCloud;\r\n      if (typeof canUseCloud === \"boolean\") {\r\n        return canUseCloud;\r\n      }\r\n      internalNode = internalNode.child;\r\n    }\r\n  };\r\n\r\n  const addMoreOptionsToPrompt = (variable) => {\r\n    if (addon.self.disabled) {\r\n      return;\r\n    }\r\n\r\n    const promptBody = document.querySelector('[class^=\"prompt_body_\"]');\r\n    if (!promptBody) {\r\n      return;\r\n    }\r\n\r\n    const headerTitle = promptBody.parentElement.querySelector('[class^=\"modal_header-item_\"]');\r\n    if (headerTitle) {\r\n      if (variable.type === \"\") {\r\n        headerTitle.textContent = msg(\"edit-variable-header\");\r\n      } else {\r\n        headerTitle.textContent = msg(\"edit-list-header\");\r\n      }\r\n    }\r\n\r\n    const root = document.createElement(\"div\");\r\n    addon.tab.displayNoneWhileDisabled(root);\r\n\r\n    const createLabeledInput = (text, value) => {\r\n      const outer = document.createElement(\"label\");\r\n      const input = document.createElement(\"input\");\r\n      if (value === \"checkbox\") {\r\n        input.type = \"checkbox\";\r\n      } else {\r\n        input.name = \"variableScopeOption\";\r\n        input.type = \"radio\";\r\n        input.value = value;\r\n      }\r\n      outer.appendChild(input);\r\n      const label = document.createElement(\"span\");\r\n      label.textContent = text;\r\n      outer.appendChild(label);\r\n      return {\r\n        outer,\r\n        label,\r\n        input,\r\n      };\r\n    };\r\n    const promptDisabledClass = addon.tab.scratchClass(\"prompt_disabled-label\");\r\n\r\n    const noLocalsInStageSection = document.createElement(\"div\");\r\n    noLocalsInStageSection.className = addon.tab.scratchClass(\"prompt_info-message\", \"prompt_cloud-option\", {\r\n      others: \"sa-swap-local-global-stage\",\r\n    });\r\n    noLocalsInStageSection.appendChild(\r\n      Object.assign(document.createElement(\"span\"), {\r\n        textContent: addon.tab.scratchMessage(\"gui.gui.variablePromptAllSpritesMessage\"),\r\n      })\r\n    );\r\n\r\n    const scopeSection = document.createElement(\"div\");\r\n    scopeSection.className = addon.tab.scratchClass(\"prompt_options-row\", \"prompt_cloud-option\");\r\n    const forAllSprites = createLabeledInput(\r\n      addon.tab.scratchMessage(\"gui.gui.variableScopeOptionAllSprites\"),\r\n      \"global\"\r\n    );\r\n    const forThisSpriteOnly = createLabeledInput(\r\n      addon.tab.scratchMessage(\"gui.gui.variableScopeOptionSpriteOnly\"),\r\n      \"local\"\r\n    );\r\n    forAllSprites.input.checked = !variable.isLocal;\r\n    forThisSpriteOnly.input.checked = variable.isLocal;\r\n    scopeSection.appendChild(forAllSprites.outer);\r\n    scopeSection.appendChild(forThisSpriteOnly.outer);\r\n\r\n    const cloudSection = document.createElement(\"div\");\r\n    cloudSection.className = addon.tab.scratchClass(\"prompt_cloud-option\");\r\n    const cloudCheckbox = createLabeledInput(addon.tab.scratchMessage(\"gui.gui.cloudVariableOption\"), \"checkbox\");\r\n    cloudCheckbox.input.checked = variable.isCloud;\r\n    if (!vm.runtime.canAddCloudVariable() && !variable.isCloud) {\r\n      cloudCheckbox.input.disabled = true;\r\n      cloudSection.classList.add(promptDisabledClass);\r\n    }\r\n    cloudSection.appendChild(cloudCheckbox.outer);\r\n    const updateDisabledInputs = () => {\r\n      const thisSpriteOnlyDisabled = cloudCheckbox.input.checked;\r\n      forThisSpriteOnly.input.disabled = thisSpriteOnlyDisabled;\r\n      forThisSpriteOnly.label.classList.toggle(promptDisabledClass, thisSpriteOnlyDisabled);\r\n      if (thisSpriteOnlyDisabled) {\r\n        forAllSprites.input.click();\r\n      }\r\n    };\r\n    cloudCheckbox.input.addEventListener(\"change\", updateDisabledInputs);\r\n    updateDisabledInputs();\r\n\r\n    let isAnythingConfigurable = false;\r\n    if (isStageSelected()) {\r\n      root.appendChild(noLocalsInStageSection);\r\n    } else {\r\n      isAnythingConfigurable = true;\r\n      root.appendChild(scopeSection);\r\n    }\r\n    if (variable.type === \"\" && canUserUseCloudVariables()) {\r\n      isAnythingConfigurable = true;\r\n      root.appendChild(cloudSection);\r\n    }\r\n    if (isAnythingConfigurable) {\r\n      root.prepend(\r\n        Object.assign(document.createElement(\"div\"), {\r\n          textContent: msg(\"edit\"),\r\n          className: \"sa-swap-local-global-hint\",\r\n        })\r\n      );\r\n    }\r\n    promptBody.insertBefore(root, promptBody.lastChild);\r\n\r\n    return {\r\n      isLocal: () => forThisSpriteOnly.input.checked,\r\n      isCloud: () => cloudCheckbox.input.checked,\r\n    };\r\n  };\r\n\r\n  // https://github.com/LLK/scratch-blocks/blob/c5014f61e2e538e99601a9e0cb39e339e44c3910/core/variables.js#L470\r\n  const originalRenameVariable = ScratchBlocks.Variables.renameVariable;\r\n  ScratchBlocks.Variables.renameVariable = function (workspace, variable, opt_callback) {\r\n    const ret = originalRenameVariable.call(this, workspace, variable, (...args) => {\r\n      if (opt_callback) {\r\n        opt_callback(...args);\r\n      }\r\n      if (!addon.self.disabled && prompt) {\r\n        convertVariable(variable, prompt.isLocal(), prompt.isCloud());\r\n      }\r\n    });\r\n    const prompt = addMoreOptionsToPrompt(variable);\r\n    return ret;\r\n  };\r\n\r\n  addon.tab.createBlockContextMenu(\r\n    (items, block) => {\r\n      if (!addon.self.disabled && (block.getCategory() === \"data\" || block.getCategory() === \"data-lists\")) {\r\n        const variable = block.workspace.getVariableById(block.getVars()[0]);\r\n        if (variable) {\r\n          if (items.length > 0) {\r\n            if (items[0].text === ScratchBlocks.ScratchMsgs.translate(\"RENAME_VARIABLE\")) {\r\n              items[0].text = msg(\"edit-variable-option\");\r\n            } else if (items[0].text === ScratchBlocks.ScratchMsgs.translate(\"RENAME_LIST\")) {\r\n              items[0].text = msg(\"edit-list-option\");\r\n            }\r\n          }\r\n          items.push({\r\n            enabled: true,\r\n            separator: true,\r\n            text: msg(`to-${variable.isLocal ? \"global\" : \"local\"}`),\r\n            callback: () => convertVariable(variable, !variable.isLocal, variable.isCloud),\r\n          });\r\n        }\r\n      }\r\n      return items;\r\n    },\r\n    {\r\n      flyout: true,\r\n      blocks: true,\r\n    }\r\n  );\r\n}\r\n"],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACPA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;;;;;;;;;;;;ACHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AACA;AAAA;AACA;AACA;AAEA;AADA;AAIA;AACA;AAEA;AADA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AAEA;AACA;AACA;AADA;AAGA;AAEA;AADA;AAKA;AACA;AACA;AAIA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AAAA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAFA;AAKA;;;;A","sourceRoot":""}