{"version":3,"file":"js/addon-entry-disable-stage-drag-select.js","sources":["webpack://GUI/./src/addons/addons/disable-stage-drag-select/_runtime_entry.js","webpack://GUI/./src/addons/addons/disable-stage-drag-select/userscript.js"],"sourcesContent":["/* generated by pull.js */\nimport _js from \"./userscript.js\";\nexport const resources = {\n  \"userscript.js\": _js,\n};\n","export default async ({ addon, console }) => {\r\n  const vm = addon.tab.traps.vm;\r\n\r\n  let shiftKeyPressed = false;\r\n  document.addEventListener(\r\n    \"mousedown\",\r\n    function (e) {\r\n      shiftKeyPressed = e.shiftKey;\r\n    },\r\n    {\r\n      capture: true,\r\n    }\r\n  );\r\n\r\n  // Do not focus sprite after dragging it\r\n  const oldStopDrag = vm.stopDrag;\r\n  vm.stopDrag = function (...args) {\r\n    if (shiftKeyPressed || addon.self.disabled) return oldStopDrag.call(this, ...args);\r\n    const setEditingTarget = this.setEditingTarget;\r\n    this.setEditingTarget = () => {};\r\n    const r = oldStopDrag.call(this, ...args);\r\n    this.setEditingTarget = setEditingTarget;\r\n    return r;\r\n  };\r\n\r\n  // Don't let the editor drag sprites that aren't marked as draggable\r\n  const oldGetTargetIdForDrawableId = vm.getTargetIdForDrawableId;\r\n  vm.getTargetIdForDrawableId = function (...args) {\r\n    const targetId = oldGetTargetIdForDrawableId.call(this, ...args);\r\n    if (shiftKeyPressed || addon.self.disabled) return targetId;\r\n    if (targetId !== null) {\r\n      const target = this.runtime.getTargetById(targetId);\r\n      if (target && !target.draggable) {\r\n        return null;\r\n      }\r\n    }\r\n    return targetId;\r\n  };\r\n};\r\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AADA;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAGA;AACA;AAEA;AADA;AACA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;;;;A","sourceRoot":""}