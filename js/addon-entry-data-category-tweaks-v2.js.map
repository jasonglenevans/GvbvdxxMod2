{"version":3,"file":"js/addon-entry-data-category-tweaks-v2.js","sources":["webpack://GUI/./src/addons/addons/data-category-tweaks-v2/_runtime_entry.js","webpack://GUI/./src/addons/addons/data-category-tweaks-v2/userscript.js"],"sourcesContent":["/* generated by pull.js */\nimport _js from \"./userscript.js\";\nexport const resources = {\n  \"userscript.js\": _js,\n};\n","export default async function ({ addon, global, console, msg, safeMsg }) {\r\n  const ScratchBlocks = await addon.tab.traps.getBlockly();\r\n\r\n  const SMALL_GAP = 8;\r\n  const BIG_GAP = 24;\r\n\r\n  const vm = addon.tab.traps.vm;\r\n\r\n  // Used in setting change handler. Updated in getBlocksXML.\r\n  // (Yes this is weird but it's how it was originally and I'm too scared to change it)\r\n  let hasSeparateListCategory = false;\r\n\r\n  const separateVariablesByType = (toolboxXML) => {\r\n    const listButtonIndex = toolboxXML.findIndex(\r\n      (i) => i.getAttribute(\"callbackkey\") === \"CREATE_LIST\" || i.getAttribute(\"type\") === \"data_addtolist\"\r\n    );\r\n    return {\r\n      variables: toolboxXML.slice(0, listButtonIndex),\r\n      lists: toolboxXML.slice(listButtonIndex, toolboxXML.length),\r\n    };\r\n  };\r\n\r\n  const separateLocalVariables = (workspace, toolboxXML) => {\r\n    const { variables, lists } = separateVariablesByType(toolboxXML);\r\n\r\n    const makeLabel = (l10n) => {\r\n      const label = document.createElement(\"label\");\r\n      label.setAttribute(\"text\", msg(l10n));\r\n      return label;\r\n    };\r\n\r\n    const fixGaps = (variables) => {\r\n      if (variables.length > 0) {\r\n        for (var i = 0; i < variables.length - 1; i++) {\r\n          variables[i].setAttribute(\"gap\", SMALL_GAP);\r\n        }\r\n        variables[i].setAttribute(\"gap\", BIG_GAP);\r\n      }\r\n    };\r\n\r\n    const separateVariablesByScope = (xml) => {\r\n      const before = [];\r\n      const global = [];\r\n      const local = [];\r\n      const after = [];\r\n\r\n      for (const blockXML of xml) {\r\n        if (blockXML.hasAttribute(\"id\")) {\r\n          const id = blockXML.getAttribute(\"id\");\r\n          const variable = workspace.getVariableById(id);\r\n          if (!variable || !variable.isLocal) {\r\n            global.push(blockXML);\r\n          } else {\r\n            local.push(blockXML);\r\n          }\r\n        } else if (global.length || local.length) {\r\n          after.push(blockXML);\r\n        } else {\r\n          before.push(blockXML);\r\n        }\r\n      }\r\n\r\n      const result = before;\r\n\r\n      if (global.length) {\r\n        result.push(makeLabel(\"for-all-sprites\"));\r\n        fixGaps(global);\r\n        result.push(...global);\r\n      }\r\n\r\n      if (local.length) {\r\n        result.push(makeLabel(\"for-this-sprite-only\"));\r\n        fixGaps(local);\r\n        result.push(...local);\r\n      }\r\n\r\n      return result.concat(after);\r\n    };\r\n\r\n    return separateVariablesByScope(variables).concat(separateVariablesByScope(lists));\r\n  };\r\n\r\n  const moveReportersDown = (toolboxXML) => {\r\n    const { variables, lists } = separateVariablesByType(toolboxXML);\r\n\r\n    const moveReportersToEnd = (xml) => {\r\n      const reporters = [];\r\n      const everythingElse = [];\r\n\r\n      for (const blockXML of xml) {\r\n        if (blockXML.hasAttribute(\"id\") || blockXML.tagName === \"BUTTON\") {\r\n          // Round reporters and the create variable button\r\n          reporters.push(blockXML);\r\n        } else {\r\n          // Everything else like \"change variable by 1\"\r\n          everythingElse.push(blockXML);\r\n        }\r\n      }\r\n\r\n      if (everythingElse.length) {\r\n        everythingElse[everythingElse.length - 1].setAttribute(\"gap\", BIG_GAP);\r\n      }\r\n\r\n      return everythingElse.concat(reporters);\r\n    };\r\n\r\n    return moveReportersToEnd(variables).concat(moveReportersToEnd(lists));\r\n  };\r\n\r\n  const DataCategory = ScratchBlocks.DataCategory;\r\n  let variableCategory;\r\n  let listCategory;\r\n  const variableCategoryCallback = (workspace) => {\r\n    let result = DataCategory(workspace);\r\n\r\n    if (addon.settings.get(\"moveReportersDown\")) {\r\n      result = moveReportersDown(result);\r\n    }\r\n\r\n    if (addon.settings.get(\"separateLocalVariables\")) {\r\n      result = separateLocalVariables(workspace, result);\r\n    }\r\n\r\n    if (!hasSeparateListCategory) {\r\n      return result;\r\n    }\r\n\r\n    const { variables, lists } = separateVariablesByType(result);\r\n    variableCategory = variables;\r\n    listCategory = lists;\r\n    return variableCategory;\r\n  };\r\n  const listCategoryCallback = () => {\r\n    // Computed in variable category callback, which should be called before this method.\r\n    return listCategory;\r\n  };\r\n\r\n  // Each time a new workspace is made, these callbacks are reset, so re-register whenever a flyout is shown.\r\n  // https://github.com/LLK/scratch-blocks/blob/61f02e4cac0f963abd93013842fe536ef24a0e98/core/flyout_base.js#L469\r\n  const oldShow = ScratchBlocks.Flyout.prototype.show;\r\n  ScratchBlocks.Flyout.prototype.show = function (xmlList) {\r\n    this.workspace_.registerToolboxCategoryCallback(\"VARIABLE\", variableCategoryCallback);\r\n    this.workspace_.registerToolboxCategoryCallback(\"LIST\", listCategoryCallback);\r\n    return oldShow.call(this, xmlList);\r\n  };\r\n\r\n  // Use Scratch's extension category mechanism to replace the data category with our own.\r\n  // https://github.com/LLK/scratch-gui/blob/ddd2fa06f2afa140a46ec03be91796ded861e65c/src/containers/blocks.jsx#L344\r\n  // https://github.com/LLK/scratch-gui/blob/2ceab00370ad7bd8ecdf5c490e70fd02152b3e2a/src/lib/make-toolbox-xml.js#L763\r\n  // https://github.com/LLK/scratch-vm/blob/a0c11d6d8664a4f2d55632e70630d09ec6e9ae28/src/engine/runtime.js#L1381\r\n  const originalGetBlocksXML = vm.runtime.getBlocksXML;\r\n  vm.runtime.getBlocksXML = function (target) {\r\n    const result = originalGetBlocksXML.call(this, target);\r\n    hasSeparateListCategory = addon.settings.get(\"separateListCategory\");\r\n    if (hasSeparateListCategory) {\r\n      result.push({\r\n        id: \"data\",\r\n        xml: `\r\n        <category\r\n          name=\"%{BKY_CATEGORY_VARIABLES}\"\r\n          id=\"variables\"\r\n          colour=\"#FF8C1A\"\r\n          secondaryColour=\"#DB6E00\"\r\n          custom=\"VARIABLE\">\r\n        </category>\r\n        <category\r\n          name=\"${safeMsg(\"list-category\")}\"\r\n          id=\"lists\"\r\n          colour=\"#FF661A\"\r\n          secondaryColour=\"#FF5500\"\r\n          custom=\"LIST\">\r\n        </category>`,\r\n      });\r\n    }\r\n    return result;\r\n  };\r\n\r\n  // If editingTarget is set, the editor has already rendered and we have to tell it to rerender.\r\n  if (vm.editingTarget) {\r\n    vm.emitWorkspaceUpdate();\r\n  }\r\n\r\n  addon.settings.addEventListener(\"change\", (e) => {\r\n    // When the separate list category option changes, we need to do a workspace update.\r\n    // For all other options, just refresh the toolbox.\r\n    // Always doing both of these in response to a settings change causes many issues.\r\n    if (addon.settings.get(\"separateListCategory\") !== hasSeparateListCategory) {\r\n      if (vm.editingTarget) {\r\n        vm.emitWorkspaceUpdate();\r\n      }\r\n    } else {\r\n      const workspace = Blockly.getMainWorkspace();\r\n      if (workspace) {\r\n        workspace.refreshToolboxSelection_();\r\n      }\r\n    }\r\n  });\r\n}\r\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AADA;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAkBA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}