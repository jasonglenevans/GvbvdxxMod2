{"version":3,"file":"js/addon-entry-default-costume-editor-color.js","sources":["webpack://GUI/./src/addons/addons/default-costume-editor-color/_runtime_entry.js","webpack://GUI/./src/addons/addons/default-costume-editor-color/userscript.js"],"sourcesContent":["/* generated by pull.js */\nimport _js from \"./userscript.js\";\nexport const resources = {\n  \"userscript.js\": _js,\n};\n","export default async function ({ addon, global, console, msg }) {\r\n  // We don\"t *need* to wait for the costume editor to be opened, but redux updates take a non-zero\r\n  // amount of CPU time so let's delay that for as long as possible.\r\n  await addon.tab.traps.getPaper();\r\n\r\n  const hexComponent = (str) => Math.round(+str).toString(16).toUpperCase().padStart(2, \"0\");\r\n\r\n  const parseColor = (color) => {\r\n    if (color === null) {\r\n      return null;\r\n    }\r\n    if (typeof color === \"string\") {\r\n      // TW natively supports hex color codes with or without transparency\r\n      if (color.startsWith(\"#\")) {\r\n        return color.substring(0, 9).toUpperCase();\r\n      }\r\n      // Sometimes paper gives us rgb() colors which have to be converted to hex\r\n      const rgbMatch = color.match(/^rgb\\((\\d+)\\s*,(\\d+)\\s*,(\\d+)\\)$/);\r\n      if (rgbMatch) {\r\n        const [_, r, g, b] = rgbMatch;\r\n        return `#${hexComponent(r)}${hexComponent(g)}${hexComponent(b)}`;\r\n      }\r\n      // It can also give us rgba() colors\r\n      const rgbaMatch = color.match(/^rgba\\((\\d+)\\s*,(\\d+)\\s*,(\\d+),([\\d.]+)\\)$/);\r\n      if (rgbaMatch) {\r\n        const [_, r, g, b, a] = rgbaMatch;\r\n        return `#${hexComponent(r)}${hexComponent(g)}${hexComponent(b)}${hexComponent(a * 255)}`;\r\n      }\r\n    }\r\n    console.log(\"Could not normalize color\", color);\r\n    return null;\r\n  };\r\n\r\n  const parseColorStyleColor = (color) => {\r\n    if (color === MIXED) return MIXED;\r\n    return parseColor(color);\r\n  };\r\n\r\n  // Special value Scratch uses as color when objects with different colors are selected\r\n  // https://github.com/LLK/scratch-paint/blob/6733e20b56f52d139f9885952a57c7da012a542f/src/helper/style-path.js#L10\r\n  const MIXED = \"scratch-paint/style-path/mixed\";\r\n\r\n  const SCRATCH_DEFAULT_FILL = parseColor(\"#9966FF\");\r\n  const SCRATCH_DEFAULT_STROKE = parseColor(\"#000000\");\r\n\r\n  const TOOL_INFO = Object.assign(Object.create(null), {\r\n    // Tool names and gradient info defined in https://github.com/LLK/scratch-paint/blob/develop/src/lib/modes.js\r\n    // Search for activateTool() in matching file in https://github.com/LLK/scratch-paint/tree/develop/src/containers\r\n    BRUSH: {\r\n      resetsFill: true,\r\n    },\r\n    ERASER: {},\r\n    LINE: {\r\n      resetsStroke: true,\r\n      requiresNonZeroStrokeWidth: true,\r\n      supportsGradient: true,\r\n    },\r\n    FILL: {\r\n      resetsFill: true,\r\n      supportsGradient: true,\r\n    },\r\n    SELECT: {\r\n      supportsGradient: true,\r\n    },\r\n    RESHAPE: {\r\n      supportsGradient: true,\r\n    },\r\n    OVAL: {\r\n      resetsFill: true,\r\n      resetsStroke: true,\r\n      supportsGradient: true,\r\n    },\r\n    RECT: {\r\n      resetsFill: true,\r\n      resetsStroke: true,\r\n      supportsGradient: true,\r\n    },\r\n    TEXT: {\r\n      resetsFill: true,\r\n      resetsStroke: true,\r\n    },\r\n    BIT_BRUSH: {\r\n      resetsFill: true,\r\n    },\r\n    BIT_LINE: {\r\n      resetsFill: true,\r\n      requiresNonZeroStrokeWidth: true,\r\n    },\r\n    BIT_OVAL: {\r\n      resetsFill: true,\r\n      resetsStroke: true,\r\n      supportsGradient: true,\r\n    },\r\n    BIT_RECT: {\r\n      resetsFill: true,\r\n      resetsStroke: true,\r\n      supportsGradient: true,\r\n    },\r\n    BIT_TEXT: {\r\n      resetsFill: true,\r\n      resetsStroke: true,\r\n    },\r\n    BIT_FILL: {\r\n      resetsFill: true,\r\n      supportsGradient: true,\r\n    },\r\n    BIT_ERASER: {},\r\n    BIT_SELECT: {\r\n      supportsGradient: true,\r\n    },\r\n  });\r\n\r\n  const getToolInfo = () => TOOL_INFO[addon.tab.redux.state.scratchPaint.mode];\r\n\r\n  class ColorStyleReducerWrapper {\r\n    constructor(reduxPropertyName, primaryAction, secondaryAction, gradientTypeAction) {\r\n      this.reduxPropertyName = reduxPropertyName;\r\n      this.primaryAction = primaryAction;\r\n      this.secondaryAction = secondaryAction;\r\n      this.gradientTypeAction = gradientTypeAction;\r\n    }\r\n\r\n    get(state = addon.tab.redux.state) {\r\n      return state.scratchPaint.color[this.reduxPropertyName];\r\n    }\r\n\r\n    set(newColor) {\r\n      const state = this.get();\r\n      const newPrimary = parseColorStyleColor(newColor.primary);\r\n      if (state.primary !== newPrimary) {\r\n        addon.tab.redux.dispatch({\r\n          type: this.primaryAction,\r\n          color: newPrimary,\r\n        });\r\n      }\r\n      const toolInfo = getToolInfo();\r\n      const toolSupportsGradient = toolInfo && toolInfo.supportsGradient;\r\n      if (toolSupportsGradient) {\r\n        const newSecondary = parseColorStyleColor(newColor.secondary);\r\n        if (state.secondary !== newSecondary) {\r\n          addon.tab.redux.dispatch({\r\n            type: this.secondaryAction,\r\n            color: newSecondary,\r\n          });\r\n        }\r\n        if (state.gradientType !== newColor.gradientType) {\r\n          addon.tab.redux.dispatch({\r\n            type: this.gradientTypeAction,\r\n            gradientType: newColor.gradientType,\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const fillStyle = new ColorStyleReducerWrapper(\r\n    \"fillColor\",\r\n    \"scratch-paint/fill-style/CHANGE_FILL_COLOR\",\r\n    \"scratch-paint/fill-style/CHANGE_FILL_COLOR_2\",\r\n    \"scratch-paint/fill-style/CHANGE_FILL_GRADIENT_TYPE\"\r\n  );\r\n  const strokeStyle = new ColorStyleReducerWrapper(\r\n    \"strokeColor\",\r\n    \"scratch-paint/stroke-style/CHANGE_STROKE_COLOR\",\r\n    \"scratch-paint/stroke-style/CHANGE_STROKE_COLOR_2\",\r\n    \"scratch-paint/stroke-style/CHANGE_STROKE_GRADIENT_TYPE\"\r\n  );\r\n\r\n  const simpleHexColor = (hex) => ({\r\n    primary: hex,\r\n    secondary: null,\r\n    gradientType: \"SOLID\",\r\n  });\r\n\r\n  let defaultFillColor;\r\n  let defaultStrokeColor;\r\n  let defaultStrokeWidth;\r\n  const setDefaultColorsToSettings = () => {\r\n    defaultFillColor = simpleHexColor(parseColor(addon.settings.get(\"fill\")));\r\n    defaultStrokeColor = simpleHexColor(parseColor(addon.settings.get(\"stroke\")));\r\n    defaultStrokeWidth = addon.settings.get(\"strokeSize\");\r\n  };\r\n  setDefaultColorsToSettings();\r\n\r\n  const applyFillColor = () => {\r\n    fillStyle.set(defaultFillColor);\r\n  };\r\n  const applyStrokeColor = () => {\r\n    strokeStyle.set(defaultStrokeColor);\r\n  };\r\n  const applyStrokeWidth = (mustBeNonZero) => {\r\n    let width = defaultStrokeWidth;\r\n    if (width === 0 && mustBeNonZero) {\r\n      width = 1;\r\n    }\r\n    if (addon.tab.redux.state.scratchPaint.color.strokeWidth !== width) {\r\n      addon.tab.redux.dispatch({\r\n        type: \"scratch-paint/stroke-width/CHANGE_STROKE_WIDTH\",\r\n        strokeWidth: width,\r\n      });\r\n    }\r\n  };\r\n\r\n  if (!addon.self.disabled) {\r\n    applyFillColor();\r\n    applyStrokeColor();\r\n    applyStrokeWidth(false);\r\n  }\r\n\r\n  addon.settings.addEventListener(\"change\", () => {\r\n    if (!addon.settings.get(\"persistence\")) {\r\n      setDefaultColorsToSettings();\r\n    }\r\n  });\r\n\r\n  const isValidColorToPersist = (color) => color.primary !== null && color.primary !== MIXED;\r\n\r\n  let activatingTool = false;\r\n  addon.tab.redux.initialize();\r\n  addon.tab.redux.addEventListener(\"statechanged\", ({ detail }) => {\r\n    if (addon.self.disabled) {\r\n      return;\r\n    }\r\n    const action = detail.action;\r\n\r\n    if (!activatingTool && addon.settings.get(\"persistence\")) {\r\n      // We always want to check for changes instead of filtering to just certain actions because quite a few\r\n      // actions can change these.\r\n      const newFill = fillStyle.get();\r\n      if (fillStyle.get(detail.prev) !== newFill && isValidColorToPersist(newFill)) {\r\n        defaultFillColor = newFill;\r\n      }\r\n      const newStroke = strokeStyle.get();\r\n      if (strokeStyle.get(detail.prev) !== newStroke && isValidColorToPersist(newStroke)) {\r\n        defaultStrokeColor = newStroke;\r\n      }\r\n\r\n      const newStrokeWidth = detail.next.scratchPaint.color.strokeWidth;\r\n      if (typeof newStrokeWidth === \"number\") {\r\n        defaultStrokeWidth = newStrokeWidth;\r\n      }\r\n    }\r\n\r\n    if (action.type === \"scratch-paint/modes/CHANGE_MODE\") {\r\n      activatingTool = true;\r\n      queueMicrotask(() => {\r\n        activatingTool = false;\r\n        if (addon.settings.get(\"persistence\")) {\r\n          // In persistence, we always want to re-apply the previous stroke and fill.\r\n          const toolInfo = getToolInfo();\r\n          if (!toolInfo) {\r\n            console.warn(\"unknown tool\", newToolName);\r\n            return;\r\n          }\r\n          if (toolInfo.resetsFill) {\r\n            applyFillColor();\r\n          }\r\n          if (toolInfo.resetsStroke) {\r\n            applyStrokeWidth(!!toolInfo.requiresNonZeroStrokeWidth);\r\n            applyStrokeColor();\r\n          }\r\n        } else {\r\n          // In non-persistence, we'll only apply the default colors when Scratch resets them to maintain the same behavior.\r\n          // We have to do this weird redux trick because we can't modify these constants:\r\n          // https://github.com/LLK/scratch-paint/blob/6733e20b56f52d139f9885952a57c7da012a542f/src/reducers/fill-style.js#L7\r\n          // https://github.com/LLK/scratch-paint/blob/6733e20b56f52d139f9885952a57c7da012a542f/src/reducers/stroke-style.js#L7\r\n          const oldFillColor = fillStyle.get(detail.prev);\r\n          if (oldFillColor.primary === null || oldFillColor.primary === MIXED) {\r\n            const newFillColor = fillStyle.get();\r\n            if (newFillColor.primary === SCRATCH_DEFAULT_FILL) {\r\n              applyFillColor();\r\n            }\r\n          }\r\n          const oldStrokeColor = strokeStyle.get(detail.prev);\r\n          if (oldStrokeColor.primary === null || oldStrokeColor.primary === MIXED) {\r\n            const newStrokeColor = strokeStyle.get();\r\n            if (newStrokeColor.primary === SCRATCH_DEFAULT_STROKE) {\r\n              applyStrokeWidth(true);\r\n              applyStrokeColor();\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }\r\n  });\r\n}\r\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AADA;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AADA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AADA;AA9DA;AACA;AAkEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAvCA;AACA;AAwCA;AAMA;AACA;AAMA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}